"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bga5t#n-a9=mx^glxprkc#16c#z*n_t%o8jiwh(y*i+h7c!xo$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',  # 富文本编辑器
    'haystack',  # 注册全文检索框架
    'user',  # 用户模块
    'goods',  # 商品模块
    'cart',  # 购物车模块
    'order',  # 订单模块
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'PORT': 3306,
    }
}

# django认证系统使用的模型类
AUTH_USER_MODEL = 'user.User'  # python manage.py createsuperuser

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# 指定收集静态文件的路径
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 富文本编辑器配置
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advance',
    'width': 600,
    'height': 400,
}

# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# smpt服务地址
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'evan_0520@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = ''
# 收件人看到的发件人
EMAIL_FROM = '天天生鲜<evan_0520@163.com>'

# Django的缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 配置session存储
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 配置登录url地址
LOGIN_URL = '/user/login'  # /accounts/login?next=/user

# # 设置Django的文件存储类
# DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'
#
# # 设置fdfs使用的client.conf文件路径
# FDFS_CLIENT_CONF = './utils/fdfs/client.conf'
#
# # 设置fdfs存储服务器上nginx的IP和端口号
# FDFS_URL = 'http://127.0.0.1:8888/'

# 全文检索框架的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

# 支付宝sdk相关参数
ALIPAY_APPID = "2016101800712871"
APP_PRIVATE_KEY_PATH = os.path.join(BASE_DIR, 'apps', 'order', 'app_private_key.pem')
ALIPAY_PUBLIC_KEY_PATH = os.path.join(BASE_DIR, 'apps', 'order', 'alipay_public_key.pem')
with open(APP_PRIVATE_KEY_PATH, 'r') as f:
    APP_PRIVATE_KEY_STRING = f.read()
with open(ALIPAY_PUBLIC_KEY_PATH, 'r') as f:
    ALIPAY_PUBLIC_KEY_STRING = f.read()

# 银联支付相关参数
# 银联版本号(固定)
VERSION = "5.1.0"
# 商户ID(配置项)
MER_ID = "777290058178368"  # 你的商户id  （正式生产环境需修改）
# 前台回调地址(支付成功回调成功)(配置项)（正式生产环境需修改）
FRONT_URL = "http://localhost:8080/order/unionpay"  # http://公网IP/back/
# 后台回调地址(配置项)（正式生产环境需修改）
BACK_URL = "http://localhost:8080/order/unionpay"  # http://公网IP/notify/
# 证书地址(配置项)（正式生产环境需修改）
CERT_URL = os.path.join(BASE_DIR, 'apps', 'order', 'acp_test_sign.pfx')
# 证书解密密码(根据实际去调配)(配置项) （正式生产环境需修改）
CERT_PASSWORD = "000000"
# 是否开启测试模式(默认False)(配置项)（正式生产环境为False）
UNION_DEBUG = True

# 微信支付相关参数
# 微信分配的公众账号ID
APP_ID = "wx6534240dfae560"
# 微信支付分配的商户号
MCH_ID = "13459829292"
# 私钥（在商户后台设置的就是这个值，注意修改任何一段需要同步修改）
WX_MCH_KEY = "D3EG723wIxgv2jnEgkr38yNJ8cP05D6aoT"
# 异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。
ASYN_NOTIFY_URL = "http://xxxxxx.com:8080/test/weixin/"
# 统一下单地址
ORDER_URL = "https://api.mch.weixin.qq.com/pay/unifiedorder"
# 查询订单url
SEARCH_URL = "https://api.mch.weixin.qq.com/pay/orderquery"
# 关闭订单url
CLOSE_URL = "https://api.mch.weixin.qq.com/pay/closeorder"
# 申请退款url
REFUND_URL = "https://api.mch.weixin.qq.com/secapi/pay/refund"
# 查询申请退款
SEARCH_REFUND_URL = "https://api.mch.weixin.qq.com/pay/refundquery"
# 服务器存放证书路径（微信支付签发的）
API_CLIENT_CERT_PATH = os.path.join(BASE_DIR, 'apps', 'order', 'alipay_public_key.pem')
API_CLIENT_KEY_PATH = os.path.join(BASE_DIR, 'apps', 'order', 'app_private_key.pem')
CREATE_IP = '127.0.0.1'  # 你服务器的IP
NOTIFY_URL = "http://localhost:8080/order/weixinpay"  # 微信支付结果回调接口，需要改为你的服务器上处理结果回调的方法路径
QRCODE_PATH = os.path.join(STATIC_ROOT, "images", "qrcode")
